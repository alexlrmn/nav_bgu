<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>

	<include file="$(find nav_bgu)/launch/armadillo.launch">
		 <arg name="have_map_file" value="false"/>
		 <arg name="lidar" value="true"/>
		 <arg name="move_base" value="true"/> 
		 <arg name="kinect2" value="true"/>
		 <arg name="joystick" value="true"/>
		 <arg name="moveit" value="true"/>

	</include>


	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />
		<param name="filter_ground" value="true" />	
		<param name="ground_filter/plane_distance" value="0.25"/>
			

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/kinect2/qhd/points" />
		<remap from="projected_map" to="map" />

		
	
	</node>

</launch>
